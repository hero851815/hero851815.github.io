[{"categories":["Linux"],"content":"系统目录","date":"2021-11-07","objectID":"/linxu%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/","tags":["linux"],"title":"Linux 系统目录","uri":"/linxu%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/"},{"categories":["Linux"],"content":"Linux 系统目录说明 root Description /bin bin 是 Binary 的缩写，这个目录存放着最经常使用的命令。 /boot 这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev dev 是 Device (设备) 的缩写，该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。 /etc 这个目录用来存放所有的系统管理所需要的配置文件和子目录。 /home 用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 /lib: 这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。 /lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /media linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。 /mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。 /opt 这是给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的。 /proc 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的 ping 命令，使别人无法 ping 你的机器 /root 该目录为系统管理员，也称作超级权限者的用户主目录。 /sbin 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。 /selinux 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放 selinux 相关的文件的。 /srv 该目录存放一些服务启动之后需要提取的数据。 /sys 这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面 3 种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。 /tmp 这个目录是用来存放一些临时文件的。 /usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。 /usr/bin 系统用户使用的应用程序。 ","date":"2021-11-07","objectID":"/linxu%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/:0:0","tags":["linux"],"title":"Linux 系统目录","uri":"/linxu%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/"},{"categories":["documentation"],"content":"新建代码库 ","date":"2021-11-12","objectID":"/git/:1:0","tags":["git"],"title":"Git 常用命令","uri":"/git/"},{"categories":["documentation"],"content":"1.项目目录 cd /user/mydev ","date":"2021-11-12","objectID":"/git/:1:1","tags":["git"],"title":"Git 常用命令","uri":"/git/"},{"categories":["documentation"],"content":"2.创建空的本地仓库 git init ","date":"2021-11-12","objectID":"/git/:1:2","tags":["git"],"title":"Git 常用命令","uri":"/git/"},{"categories":["documentation"],"content":"3.将项目所有文件添加到缓存 git add . ","date":"2021-11-12","objectID":"/git/:1:3","tags":["git"],"title":"Git 常用命令","uri":"/git/"},{"categories":["documentation"],"content":"4.将缓存中的文件提交到git库 git commit -m \"添加此次更新的内容备注\" ","date":"2021-11-12","objectID":"/git/:1:4","tags":["git"],"title":"Git 常用命令","uri":"/git/"},{"categories":["documentation"],"content":"5.本地库链接到远程仓库 git remote add origin HTTPS链接 ","date":"2021-11-12","objectID":"/git/:1:5","tags":["git"],"title":"Git 常用命令","uri":"/git/"},{"categories":["documentation"],"content":"6.上传代码到远程库 git push origin master ","date":"2021-11-12","objectID":"/git/:1:6","tags":["git"],"title":"Git 常用命令","uri":"/git/"},{"categories":["documentation"],"content":"星环TDH","date":"2021-12-01","objectID":"/tdh/","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"信息 Transwarp Data Hub是基于Hadoop技术架构产生的大数据平台 TDH架构图 架构图架构图 \" 架构图 ","date":"2021-12-01","objectID":"/tdh/:0:0","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"1 基础概念 ","date":"2021-12-01","objectID":"/tdh/:1:0","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"服务 基于TDH6.0整理 服务 描述 Zookeeper 分布式应用 HDFS 分布式文件系统 YARN 分布式资源调度 Inceptor 分布式SQL引擎 Inceptor-Gateway 连接客户端和Inceptor服务的中间件 Hyperbase NoSQL数据库 Discover 数据科学分析探索工具 Slipstream 支持事件驱动和微批处理的流处理引擎 Slipstream Studio 流处理引擎的监控管理平台 Search 可扩展的分布式全文搜索和分析引擎 Workflow 工作流调度平台 Transporter 数据etl工具 Pilot 轻量级自助式分析BI工具 Governor 元数据管理和数据治理工具 Rubik Cube设计工具 TxSQL 强一致、高可用的分布式数据库系统 Kafka 分布式消息队列 Codis 分布式Redis解决方案 日志分析组件 分布式日志收集和分析系统 Shiva 内置存储框架 Transwarp Manager 部署、管理和运维TDH集群的管理组件 Kerberos 认证类型 Guardian 平台安全管控组件 TCOS Market 云操作系统市场 ","date":"2021-12-01","objectID":"/tdh/:1:1","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"2 安装 由星环工程师负责安装 ","date":"2021-12-01","objectID":"/tdh/:2:0","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"环境描述 ","date":"2021-12-01","objectID":"/tdh/:2:1","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"3 配置 ","date":"2021-12-01","objectID":"/tdh/:3:0","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"to be continued ","date":"2021-12-01","objectID":"/tdh/:4:0","tags":["tdh"],"title":"星环TDH 笔记","uri":"/tdh/"},{"categories":["documentation"],"content":"SQL优化技巧","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"注意 文章内容来自网络，并非原创，加入个人博客方便阅读，举例多以mysql作为列子 sql优化sql优化 \" sql优化 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:0:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"1 避免使用select * 反例： select*fromuserwhereid=1; select *不会走覆盖索引,出现大量的回表操作，而从导致查询sql的性能很低。 正例： selectname,agefromuserwhereid=1; sql语句查询时，只查需要用到的列，多余的列根本无需查出来。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:1:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"2 用union all代替union sql语句使用union关键字后，可以获取排重后的数据。而如果使用union all关键字，可以获取所有数据，包含重复的数据。 反例： (select*fromuserwhereid=1)union(select*fromuserwhereid=2); 排重的过程需要遍历、排序和比较，它更耗时，更消耗cpu资源。所以如果能用union all的时候，尽量不用union。 正例： (select*fromuserwhereid=1)unionall(select*fromuserwhereid=2); 除非是有些特殊的场景，比如union all之后，结果集中出现了重复数据，而业务场景中是不允许产生重复数据的，这时可以使用union。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:2:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"3 小表驱动大表 假如有order和user两张表，其中order表有10000条数据，而user表有100条数据。这时如果想查一下，所有有效的用户下过的订单列表。可以使用in关键字实现： select*fromorderwhereuser_idin(selectidfromuserwherestatus=1) 也可以使用exists关键字实现： select*fromorderwhereexists(select1fromuserwhereorder.user_id=user.idandstatus=1) 前面提到的这种业务场景，使用in关键字去实现业务需求，更加合适。 为什么呢？ 因为如果sql语句中包含了in关键字，则它会优先执行in里面的子查询语句，然后再执行in外面的语句。如果in里面的数据量很少，作为条件查询速度更快。 而如果sql语句中包含了exists关键字，它优先执行exists左边的语句（即主查询语句）。然后把它作为条件，去跟右边的语句匹配。如果匹配上，则可以查询出数据。如果匹配不上，数据就被过滤掉了。 这个需求中，order表有10000条数据，而user表有100条数据。order表是大表，user表是小表。如果order表在左边，则用in关键字性能更好。 总结一下： in 适用于左边大表，右边小表。 exists 适用于左边小表，右边大表。 不管是用in，还是exists关键字，其核心思想都是用小表驱动大表。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:3:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"4 批量操作 反例： for(Order order: list){ orderMapper.insert(order): } 在循环中逐条插入数据。 insertintoorder(id,code,user_id)values(123,'001',100); 该操作需要多次请求数据库，才能完成这批数据的插入。 正例： orderMapper.insertBatch(list): 提供一个批量插入数据的方法。 insertintoorder(id,code,user_id)values(123,'001',100),(124,'002',100),(125,'003',101); 这样只需要远程请求一次数据库，sql性能会得到提升，数据量越多，提升越大。 但需要注意的是，不建议一次批量操作太多的数据，如果数据太多数据库响应也会很慢。批量操作需要把握一个度，建议每批数据尽量控制在500以内。如果数据多于500，则分多批次处理。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:4:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"5 多用limit 有时候，我们需要查询某些数据中的第一条，比如：查询某个用户下的第一个订单，想看看他第一次的首单时间。 反例： selectid,create_datefromorderwhereuser_id=123orderbycreate_dateasc; 根据用户id查询订单，按下单时间排序，先查出该用户所有的订单数据，得到一个订单集合。然后在代码中，获取第一个元素的数据，即首单的数据，就能获取首单时间。 虽说这种做法在功能上没有问题，但它的效率非常不高，需要先查询出所有的数据，有点浪费资源。 正例： selectid,create_datefromorderwhereuser_id=123orderbycreate_dateasclimit1; 使用limit 1，只返回该用户下单时间最小的那一条数据即可。 此外，在删除或者修改数据时，为了防止误操作，导致删除或修改了不相干的数据，也可以在sql语句最后加上limit。 例如： updateordersetstatus=0,edit_time=now(3)whereid\u003e=100andid\u003c200limit100; 这样即使误操作，比如把id搞错了，也不会对太多的数据造成影响。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:5:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"6 in中值太多 对于批量查询接口，我们通常会使用in关键字过滤出数据。比如：想通过指定的一些id，批量查询出用户信息。 selectid,namefromcategorywhereidin(1,2,3...100000000); 如果我们不做任何限制，该查询语句一次性可能会查询出非常多的数据，很容易导致接口超时。 selectid,namefromcategorywhereidin(1,2,3...100)limit500; 可以在sql中对数据用limit做限制。 不过我们更多的是要在业务代码中加限制，伪代码如下： public List\u003cCategory\u003e getCategory(List\u003cLong\u003e ids) { if(CollectionUtils.isEmpty(ids)) { return null; } if(ids.size() \u003e 500) { throw new BusinessException(\"一次最多允许查询500条记录\") } return mapper.getCategoryList(ids); } 还有一个方案就是：如果ids超过500条记录，可以分批用多线程去查询数据。每批只查500条记录，最后把查询到的数据汇总到一起返回。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:6:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"7 增量查询 有时候，我们需要通过远程接口查询数据，然后同步到另外一个数据库。 反例： select*fromuser; 如果直接获取所有的数据，然后同步过去。这样虽说非常方便，但是带来了一个非常大的问题，就是如果数据很多的话，查询性能会非常差。 这时该怎么办呢？ 正例： select*fromuserwhereid\u003e#{lastId}andcreate_time\u003e=#{lastCreateTime}limit100; 按id和时间升序，每次只同步一批数据，这一批数据只有100条记录。每次同步完成之后，保存这100条数据中最大的id和时间，给同步下一批数据的时候用。 通过这种增量查询的方式，能够提升单次查询的效率。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:7:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"8 高效的分页 有时候，列表页在查询数据时，为了避免一次性返回过多的数据影响接口性能，我们一般会对查询接口做分页处理。 在mysql中分页一般用的limit关键字： selectid,name,agefromuserlimit10,20; 如果表中数据量少，用limit关键字做分页，没啥问题。但如果表中数据量很多，用它就会出现性能问题。 比如现在分页参数变成了： selectid,name,agefromuserlimit1000000,20; mysql会查到1000020条数据，然后丢弃前面的1000000条，只查后面的20条数据，这个是非常浪费资源的。 那么，这种海量数据该怎么分页呢？ 优化sql： selectid,name,agefromuserwhereid\u003e1000000limit20; 先找到上次分页最大的id，然后利用id上的索引查询。不过该方案，要求id是连续的，并且有序的。 还能使用between优化分页。 selectid,name,agefromuserwhereidbetween1000000and1000020; 需要注意的是between要在唯一索引上分页，不然会出现每页大小不一致的问题。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:8:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"9 用连接查询代替子查询 mysql中如果需要从两张以上的表中查询出数据的话，一般有两种实现方式：子查询 和 连接查询。 例如： select*fromorderwhereuser_idin(selectidfromuserwherestatus=1) 子查询语句可以通过in关键字实现，一个查询语句的条件落在另一个select语句的查询结果中。程序先运行在嵌套在最内层的语句，再运行外层的语句。 子查询语句的优点是简单，结构化，如果涉及的表数量不多的话。 但缺点是mysql执行子查询时，需要创建临时表，查询完毕后，需要再删除这些临时表，有一些额外的性能消耗。 这时可以改成连接查询。具体例子如下： selecto.*fromorderoinnerjoinuseruono.user_id=u.idwhereu.status=1 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:9:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"10 join的表不宜过多 根据阿里巴巴开发者手册的规定，join表的数量不应该超过3个。 正例： selecta.name,b.name.c.name,a.d_namefromainnerjoinbona.id=b.a_idinnerjoinconc.b_id=b.id 如果实现业务场景中需要查询出另外几张表中的数据，可以在a、b、c表中冗余专门的字段，比如：在表a中冗余d_name字段，保存需要查询出的数据。 不过我之前也见过有些ERP系统，并发量不大，但业务比较复杂，需要join十几张表才能查询出数据。 所以join表的数量要根据系统的实际情况决定，不能一概而论，尽量越少越好。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:10:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"11 join时要注意 我们在涉及到多张表联合查询的时候，一般会使用join关键字。 而join使用最多的是left join和inner join。 left join：求两个表的交集外加左表剩下的数据。 inner join：求两个表交集的数据。 使用inner join的示例如下： selecto.id,o.code,u.namefromorderoinnerjoinuseruono.user_id=u.idwhereu.status=1; 如果两张表使用inner join关联，mysql会自动选择两张表中的小表，去驱动大表，所以性能上不会有太大的问题。 使用left join的示例如下： selecto.id,o.code,u.namefromorderoleftjoinuseruono.user_id=u.idwhereu.status=1; 如果两张表使用left join关联，mysql会默认用left join关键字左边的表，去驱动它右边的表。如果左边的表数据很多时，就会出现性能问题。 技巧 要特别注意的是在用left join关联查询时，左边要用小表，右边可以用大表。如果能用inner join的地方，尽量少用left join。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:11:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"12 控制索引的数量 众所周知，索引能够显著的提升查询sql的性能，但索引数量并非越多越好。 因为表中新增数据时，需要同时为它创建索引，而索引是需要额外的存储空间的，而且还会有一定的性能消耗。 阿里巴巴的开发者手册中规定，单表的索引数量应该尽量控制在5个以内，并且单个索引中的字段数不超过5个。 mysql使用的B+树的结构来保存索引的，在insert、update和delete操作时，需要更新B+树索引。如果索引过多，会消耗很多额外的性能。 那么，问题来了，如果表中的索引太多，超过了5个该怎么办？ 这个问题要辩证的看，如果你的系统并发量不高，表中的数据量也不多，其实超过5个也可以，只要不要超过太多就行。 但对于一些高并发的系统，请务必遵守单表索引数量不要超过5的限制。 那么，高并发系统如何优化索引数量？ 能够建联合索引，就别建单个索引，可以删除无用的单个索引。 将部分查询功能迁移到其他类型的数据库中，比如：Elastic Seach、HBase等，在业务表中只需要建几个关键索引即可。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:12:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"13 选择合理的字段类型 char表示固定字符串类型，该类型的字段存储空间的固定的，会浪费存储空间。 altertableorderaddcolumncodechar(20)NOTNULL; varchar表示变长字符串类型，该类型的字段存储空间会根据实际数据的长度调整，不会浪费存储空间。 altertableorderaddcolumncodevarchar(20)NOTNULL; 如果是长度固定的字段，比如用户手机号，一般都是11位的，可以定义成char类型，长度是11字节。 但如果是企业名称字段，假如定义成char类型，就有问题了。 如果长度定义得太长，比如定义成了200字节，而实际企业长度只有50字节，则会浪费150字节的存储空间。 如果长度定义得太短，比如定义成了50字节，但实际企业名称有100字节，就会存储不下，而抛出异常。 所以建议将企业名称改成varchar类型，变长字段存储空间小，可以节省存储空间，而且对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 我们在选择字段类型时，应该遵循这样的原则： 1.能用数字类型，就不用字符串，因为字符的处理往往比数字要慢。 2.尽可能使用小的类型，比如：用bit存布尔值，用tinyint存枚举值等。 3.长度固定的字符串字段，用char类型。 4.长度可变的字符串字段，用varchar类型。 5.金额字段用decimal，避免精度丢失问题。 还有很多原则，这里就不一一列举了。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:13:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"14 提升group by的效率 我们有很多业务场景需要使用group by关键字，它主要的功能是去重和分组。 通常它会跟having一起配合使用，表示分组后再根据一定的条件过滤数据。 反例： selectuser_id,user_namefromordergroupbyuser_idhavinguser_id\u003c=200; 这种写法性能不好，它先把所有的订单根据用户id分组之后，再去过滤用户id大于等于200的用户。 分组是一个相对耗时的操作，为什么我们不先缩小数据的范围之后，再分组呢？ 正例： selectuser_id,user_namefromorderwhereuser_id\u003c=200groupbyuser_id 使用where条件在分组前，就把多余的数据过滤掉了，这样分组时效率就会更高一些。 技巧 其实这是一种思路，不仅限于group by的优化。我们的sql语句在做一些耗时的操作之前，应尽可能缩小数据范围，这样能提升sql整体的性能。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:14:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["documentation"],"content":"15 索引优化 sql优化当中，有一个非常重要的内容就是：索引优化。 很多时候sql语句，走了索引，和没有走索引，执行效率差别很大。所以索引优化被作为sql优化的首选。 索引优化的第一步是：检查sql语句有没有走索引。 那么，如何查看sql走了索引没？ 可以使用explain命令，查看mysql的执行计划。 例如： explainselect*from`order`wherecode='002'; 结果 结果结果 \" 结果 通过这几列可以判断索引使用情况，执行计划包含列的含义如下图所示： 执行计划显示列执行计划显示列 \" 执行计划显示列 说实话，sql语句没有走索引，排除没有建索引之外，最大的可能性是索引失效了。 下面说说索引失效的常见原因： 索引失效的常见原因索引失效的常见原因 \" 索引失效的常见原因 如果不是上面的这些原因，则需要再进一步排查一下其他原因。 此外，你有没有遇到过这样一种情况：明明是同一条sql，只有入参不同而已。有的时候走的索引a，有的时候却走的索引b？ 没错，有时候mysql会选错索引。 必要时可以使用force index来强制查询sql走某个索引。 ","date":"2021-11-23","objectID":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/:15:0","tags":["sql"],"title":"SQL优化技巧","uri":"/sql%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"categories":["java"],"content":"java","date":"2021-11-18","objectID":"/java/","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"工程项目 ","date":"2021-11-18","objectID":"/java/:1:0","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"Maven 右键工程创建Maven项目，编辑pom.xml加载第三方依赖 在resources目录下创建application.yml，建议用yml，配置参数 新建Run/Debug Configurations-Application，配置Main Class，Use classpath of modules 在Files-Project Structure修改为适合的Project SDK ","date":"2021-11-18","objectID":"/java/:1:1","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"Spring Initializr 输入Group和Artifact，Java Version等 在Web中选择Spring Web 在resources目录下创建application.yml，建议用yml，配置参数 ","date":"2021-11-18","objectID":"/java/:1:2","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"Lambda Lambda表达式，只能是接口的创建，并且这个接口只能包含一个方式 ","date":"2021-11-18","objectID":"/java/:2:0","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"标准格式 (参数类型 参数名称) -\u003e (代码语句) 一些参数 一个箭头 一段代码 格式说明 小括号内的语法与传统方法参数列表一致；无参则留空；多个参数用逗号分隔 -\u003e是引入的语法格式，代表指向动作 大括号的语法与传统方法要求基本一致 ","date":"2021-11-18","objectID":"/java/:2:1","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"Mybatis ","date":"2021-11-18","objectID":"/java/:3:0","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"#和$的区别 #{} 防止SQL注入，它会将所有传入的参数作为一个字符串来处理 ${} 将传入的参数拼接到SQL上去执行，一般用于表名和字段名参数 ","date":"2021-11-18","objectID":"/java/:3:1","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["java"],"content":"mybatis-plus配置mapper pom.xml中引入依赖，配置mapper.xml路径 \u003cdependency\u003e \u003cgroupId\u003ecom.baomidou\u003c/groupId\u003e \u003cartifactId\u003emybatis-plus-boot-starter\u003c/artifactId\u003e \u003cversion\u003e3.4.1\u003c/version\u003e \u003c/dependency\u003e \u003cbuild\u003e \u003cresources\u003e \u003cresource\u003e \u003cdirectory\u003esrc/main/java\u003c/directory\u003e \u003cincludes\u003e \u003cinclude\u003e**/*.xml\u003c/include\u003e \u003c/includes\u003e \u003c/resource\u003e \u003c!--指定资源的位置--\u003e \u003cresource\u003e \u003cdirectory\u003esrc/main/resources\u003c/directory\u003e \u003c/resource\u003e \u003c/resources\u003e \u003c/build\u003e application.yml配置mybatis-plus mybatis-plus:mapper-locations:classpath*:com/example/demo/mapper/xml/*Mapper.xml *Mapper.xml格式 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"\u003e \u003cmapper namespace=\"com.example.demo.mapper.UserMapper\"\u003e \u003c/mapper\u003e ","date":"2021-11-18","objectID":"/java/:3:2","tags":["java"],"title":"Java 学习笔记","uri":"/java/"},{"categories":["python"],"content":"什么是Anaconda Anaconda (清华镜像) 就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本。Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。 ","date":"2021-11-12","objectID":"/anaconda/:0:0","tags":["anaconda","python"],"title":"Anaconda 使用","uri":"/anaconda/"},{"categories":["python"],"content":"环境配置 ","date":"2021-11-12","objectID":"/anaconda/:1:0","tags":["anaconda","python"],"title":"Anaconda 使用","uri":"/anaconda/"},{"categories":["python"],"content":"安装 使用Anaconda安装 从清华镜像中下载最新版Anaconda，安装时不要勾选Add Anaconda to my PATH environment variable，勾选可能会影响其他应用使用。 Linux To be continued 终端 安装完成后，右键管理员方式打开Anaconda Prompt终端 ","date":"2021-11-12","objectID":"/anaconda/:1:1","tags":["anaconda","python"],"title":"Anaconda 使用","uri":"/anaconda/"},{"categories":["python"],"content":"python环境 新建一个python环境 conda create -n myenv python=3.6 进入环境 activate myenv 离开环境 deactivate 列出清单 conda env list 删除环境 conda env remove -n myenv ","date":"2021-11-12","objectID":"/anaconda/:1:2","tags":["anaconda","python"],"title":"Anaconda 使用","uri":"/anaconda/"},{"categories":["python"],"content":"包 使用conda命令安装包 conda install xxx 卸载包 conda remove xxx 使用pip命令 python -m pip install xxx 卸载包 pip uninstall xxx ","date":"2021-11-12","objectID":"/anaconda/:1:3","tags":["anaconda","python"],"title":"Anaconda 使用","uri":"/anaconda/"},{"categories":["python"],"content":"什么是Jupyter Notebook Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。 文档是保存为后缀名为.ipynb的JSON格式文件，不仅便于版本控制，也方便与他人共享 ","date":"2021-11-12","objectID":"/jupyter_notebook/:0:0","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"环境配置 ","date":"2021-11-12","objectID":"/jupyter_notebook/:1:0","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"安装 ","date":"2021-11-12","objectID":"/jupyter_notebook/:1:1","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"使用Anaconda安装 Anaconda一般预安装了Jupyter Notebook，或者在终端安装conda install jupyter notebook ","date":"2021-11-12","objectID":"/jupyter_notebook/:1:2","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"使用pip安装 将pip升级到最新版本 pip3 install --upgrade pip 安装Jupyter Notebook pip3 install jupyter ","date":"2021-11-12","objectID":"/jupyter_notebook/:1:3","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"运行Jupyter Notebook ","date":"2021-11-12","objectID":"/jupyter_notebook/:2:0","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"查看 jupyter notebook --help ","date":"2021-11-12","objectID":"/jupyter_notebook/:2:1","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"启动 默认端口启动 jupyter notebook 指定端口启动 jupyter notebook --port \u003cport_number\u003e ","date":"2021-11-12","objectID":"/jupyter_notebook/:2:2","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"设置 生成配置文件 jupyter notebook --generate-config该命令用于创建文件并显示配置文件路径，若已经生成此文件再次运行时选择\"N\"，否则会覆盖原有配置 编辑配置文件 编辑文件jupyter_notebook_config.py，搜索\"c.NotebookApp.notebook_dir\"，取消注释，自定义目录路径 生成密码 打开notbook，执行以下命令 from notebook.auth import passwd p = passwd() print(p) 输入两次密码，生成sha1字符串，将整段字符串复制到配置文件中\"c.NotebookApp.password\" 重启notebook ","date":"2021-11-12","objectID":"/jupyter_notebook/:2:3","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"扩展 安装nb_conda 关联Jupyter Notebook和conda的环境和包, 安装后会多一个\"conda\"类目 conda install nb_conda 安装Markdown扩展 安装后会多一个\"Nbextensions\"类目，并勾选\"Table of Contents\" conda install -c conda-forge jupyter_contrib_nbextensions 若安装后发现没有很多配置项 jupyter contrib nbextension install --user --skip-running-check ","date":"2021-11-12","objectID":"/jupyter_notebook/:2:4","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"JupyterHub ","date":"2021-11-12","objectID":"/jupyter_notebook/:3:0","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"安装 更新pip python -m pip install --upgrade pip pip安装(推荐) python -m pip install jupyterhub npm install -g configurable-http-proxy conda安装 conda install -c conda-forge jupyterhub ","date":"2021-11-12","objectID":"/jupyter_notebook/:3:1","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["python"],"content":"设置 生成配置文件 jupyterhub --generate-config ","date":"2021-11-12","objectID":"/jupyter_notebook/:3:2","tags":["jupyter notebook","python"],"title":"Jupyter Notebook 使用","uri":"/jupyter_notebook/"},{"categories":["database"],"content":"mysql","date":"2021-11-08","objectID":"/mysql/","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"系统event ","date":"2021-11-08","objectID":"/mysql/:1:0","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"查看系统event事件开关 方法一 select @@event_scheduler; 方法二 show variables like 'event_scheduler'; ","date":"2021-11-08","objectID":"/mysql/:1:1","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"开启系统event事件开关 方法1 set GLOBAL event_scheduler=ON; 方法2 set GLOBAL event_scheduler=1; ","date":"2021-11-08","objectID":"/mysql/:1:2","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"查看系统event事件 方法一 select * from mysql.event; 方法二 SELECT * FROM information_schema.events; ","date":"2021-11-08","objectID":"/mysql/:1:3","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"备份/还原数据库 设置数据库sql_mode，在mysqld中添加sql_mode='STRICT_ALL_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER' 创建用户并且授权 CREATE USER 'dog'@'localhost' IDENTIFIED BY '123456'; CREATE USER 'pig'@'%' IDENTIFIED BY '123456'; GRANT ALL ON databasetable.* TO 'pig'@'%'; 备份：储存SQL文件为结构和数据 或 cd至bin目录 mysqldump -u root -p[password] [databasename] \u003e c:/my.sql 还原： 服务器上使用root登录 set names utf8; source c:\\db.sql ","date":"2021-11-08","objectID":"/mysql/:2:0","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"创建语法 CREATE[DEFINER={user|CURRENT_USER}]--一般不写 EVENT--event标识 [IFNOTEXISTS]--如果没有就新建，建议不写这一行，确保每个event独立不冲突 event_name-- 取个event名字 ONSCHEDULE--计划任务标识 schedule--计划任务时间，有两个参数（at 和 every），at代表当前一次，every表示每过多少时间执行一次 [ONCOMPLETION[NOT]PRESERVE]--可以不写，默认是ON COMPLETION NOT PRESERVE 即计划任务执行完毕后自动drop该事件；ON COMPLETION PRESERVE则不会drop [ENABLE|DISABLE|DISABLEONSLAVE]--可以不写，默认状态，默认是启用状态，可以指定为新建关闭状态 [COMMENT'comment']--注释event，可以不写 DO--执行语句标识 event_body;--执行的sql 计划任务可以定义的时间方式 schedule: AT timestamp [+ INTERVAL interval] … –at方式 | EVERY interval –every方式 [STARTS timestamp [+ INTERVAL interval] …] –在at/every后可以指定什么时候开始 [ENDS timestamp [+ INTERVAL interval] …] –指定什么时候结束 MySQL官方提供的时间字符，可以参考 interval: quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND} ","date":"2021-11-08","objectID":"/mysql/:3:0","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"实例 ","date":"2021-11-08","objectID":"/mysql/:4:0","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"实例1 将repair库中的fa_repair_list表根据id转移至新表 创建存储过程backupRepairList DROP PROCEDURE IF EXISTS backupRepairList; DELIMITER // CREATE PROCEDURE backupRepairList(out p_out varchar(100)) BEGIN DECLARE count int DEFAULT 0; DECLARE tableName varchar(50); DECLARE thisMonth varchar(10); DECLARE maxId varchar(20); DECLARE maxIdnew varchar(20); DECLARE sqlcreate varchar(1000); DECLARE sqlselect varchar(1000); DECLARE sqlinsert varchar(1000); DECLARE sqldelete varchar(1000); 查询备份表是否存在,不存在则创建新表 SELECT date_format(now(), '%Y%m') INTO @thisMonth; SET @tableName = CONCAT('fa_repair_list_',@thisMonth); SELECT count(*) INTO @count FROM information_schema.tables where table_name=@tableName; IF @count = 0 THEN BEGIN SET @sqlcreate = CONCAT('CREATE TABLE ',@tableName,' LIKE fa_repair_list;'); PREPARE execsql FROM @sqlcreate; EXECUTE execsql; DEALLOCATE PREPARE execsql; END ; END IF ; 迁移数据 取原表及备份表最大id BEGIN SELECT ifnull(max(id),'0') INTO @maxId FROM fa_repair_list; SET @sqlselect = CONCAT(\"SELECT ifnull(max(id),'0') INTO @maxIdnew FROM \", @tableName); PREPARE execsql FROM @sqlselect; EXECUTE execsql; DEALLOCATE PREPARE execsql; END ; 根据最大id插入备份表 IF @maxIdnew \u003c @maxId THEN BEGIN END ; END IF ; 删除原表数据 IF @maxIdnew \u003c @maxId THEN BEGIN END ; END IF ; 调试 SELECT @maxIdnew INTO p_out; END ; // DELIMITER; 创建事件 CREATE EVENT ev_repair_repairlist_sync ON SCHEDULE EVERY 1 DAY ON COMPLETION PRESERVE DO CALL backupRepairList(@p_out) ","date":"2021-11-08","objectID":"/mysql/:4:1","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"安装 ","date":"2021-11-08","objectID":"/mysql/:5:0","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"Docker安装 拉取镜像(国内) docker pull hub.c.163.com/library/mysql:5.7 docker images 创建并启动容器 docker run --name mysql -e MYSQL_ROOT_PASSWORD=mysql -p 3308:3306 -d hub.c.163.com/library/mysql:5.7 或建立目录映射（推荐） docker run -p 3308:3306 --name mysql \\ -v /usr/local/docker/mysql/conf:/etc/mysql \\ -v /usr/local/docker/mysql/logs:/var/log/mysql \\ -v /usr/local/docker/mysql/data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=mysql \\ -d hub.c.163.com/library/mysql:5.7 修改mysql密码 进入容器 docker exec -it [容器ID] /bin/bash mysql -u root -p 修改密码 use mysql SET PASSWORD FOR 'root' = PASSWORD('xxxxxxxxx'); SET PASSWORD FOR 'root'@'localhost'=PASSWORD('xxxxxxxxx'); flush privileges; 查看数据文件存放路径 show variables like '%datadir%'; 重启容器 docker stop containerid docker start contatinerid ","date":"2021-11-08","objectID":"/mysql/:5:1","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"压缩包安装 Linux 1.将mysql-5.7.31-linux-glibc2.12-x86_64.tar文件上传至/opt目录 2.解压 tar -zxvf mysql-5.7.31-linux-glibc2.12-x86_64.tar 并重命名为mysql 3.创建mysql用户组和用户并修改权限 groupadd mysql useradd -r -g mysql mysql 4.创建数据目录并赋予权限 mkdir -p /data/mysql chown mysql:mysql -R /data/mysql 5.进入/opt/mysql目录，初始化mysql bin/mysqld --initialize --user=mysql --basedir=/opt/mysql --datadir=/opt/mysql/data 6.编辑my.cnf vim /etc/my.cnf [mysqld]datadir=/opt/mysql/databasedir=/opt/mysqlsocket=/tmp/mysql.sockuser=mysqlport=3306character-set-server=utf8symbolic-links=0# 取消密码验证# skip-grant-tables # 表名不区分大小写lower_case_table_names=1 [mysqld_safe]log-error=/var/log/mysql.logpid-file=/var/run/mysqld/mysqld.pid 7.将mysql.server放置到/etc/init.d/mysql中 cp /opt/mysql/support-files/mysql.server /etc/init.d/mysql 8.启动服务 service mysql start 9.设置开机启动（可选） chkconfig --add mysql 10.配置环境变量（可选）vim /etc/profile 在PATH中添加路径 export PATH=$PATH:/opt/mysql/bin source /etc/profile使其立即生效 Windows mysqld --initialize --console mysqld install 服务名 net start 服务名 首次更换密码(使用初始化时显示的密码登录)：alter user 'root'@'localhost' identified by '123456'; 修改密码：update user set authentication_string=password(\"123456\") where user=\"root\"; flush privileges; 修改SQL_MODE：set @@sql_mode='STRICT_ALL_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER'; 安装插件 密码策略插件 拷贝validate_password.dll至lib/plugin目录 在my.ini[mysqld]模块中中添加以下参数，重启服务 early-plugin-load=\"validate_password.dll\" validate-password = FORCE_PLUS_PERMANENT 登录失败插件 windows使用.dll,linux使用.so INSTALL PLUGIN CONNECTION_CONTROL SONAME 'connection_control.dll'; 在my.ini[mysqld]模块中添加以下参数，重启服务 connection_control_min_connection_delay = 30000 connection_control_max_connection_delay = 108000 connection_control_failed_connections_threshold = 5 ","date":"2021-11-08","objectID":"/mysql/:5:2","tags":["mysql"],"title":"MYSQL","uri":"/mysql/"},{"categories":["database"],"content":"sql server","date":"2021-11-08","objectID":"/sqlserver/","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["database"],"content":"数据库备份 ","date":"2021-11-08","objectID":"/sqlserver/:1:0","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["database"],"content":"完整备份作业 USEMasterGOdeclare@strvarchar(100)set@str='D:\\DataBase\\FullBak-shi15-'+replace(replace(replace(convert(varchar,getdate(),20),'-',''),' ',''),':','')+'.bak'BACKUPDATABASE[shi15]TODISK=@strWITHRETAINDAYS=15,NOFORMAT,NOINIT,NAME=N'Demo完整备份',SKIP,NOREWIND,NOUNLOAD,STATS=10GO ","date":"2021-11-08","objectID":"/sqlserver/:1:1","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["database"],"content":"差异备份作业 USEMasterGOdeclare@strvarchar(100)set@str='D:\\DataBase\\DiffBak-shi15-'+replace(replace(replace(convert(varchar,getdate(),20),'-',''),' ',''),':','')+'.diff'BACKUPDATABASE[shi15]TODISK=@strWITHDIFFERENTIAL,RETAINDAYS=8,NOFORMAT,NOINIT,NAME=N'Demo差异备份',SKIP,NOREWIND,NOUNLOAD,STATS=10GO ","date":"2021-11-08","objectID":"/sqlserver/:1:2","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["database"],"content":"日志备份作业 USEDemoGOdeclare@strvarchar(100)set@str='D:\\DBtext\\jgj\\DBABak\\logbak'+replace(replace(replace(convert(varchar,getdate(),20),'-',''),' ',''),':','')+'.trn'BACKUPLOG[Demo]TODISK=@strWITHRETAINDAYS=3,NOFORMAT,NOINIT,NAME=N'Demo日志备份',SKIP,NOREWIND,NOUNLOAD,STATS=10GO ","date":"2021-11-08","objectID":"/sqlserver/:1:3","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["database"],"content":"限制IP登录 ","date":"2021-11-08","objectID":"/sqlserver/:2:0","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["database"],"content":"返回登录信息 SELECTa.[session_id],a.[login_time],a.[host_name],a.[original_login_name],b.[client_net_address]FROMMASTER.sys.dm_exec_sessionsaINNERJOINMASTER.sys.dm_exec_connectionsbONa.session_id=b.session_id ","date":"2021-11-08","objectID":"/sqlserver/:2:1","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["database"],"content":"限制登录用户和指定IP -- ============================================= -- Author: -- Create date: \u003c2021.08.04\u003e -- Description: \u003c限制sa用户只能在本机和指定的IP中登陆\u003e -- ============================================= CREATETRIGGER[tr_connection_limit]ONALLSERVERWITHEXECUTEAS'sa'FORLOGONASBEGIN--限制sa这个帐号的连接 IFORIGINAL_LOGIN()='sa'--允许sa在本机和下面的IP登录 AND(SELECTEVENTDATA().value('(/EVENT_INSTANCE/ClientHost)[1]','NVARCHAR(15)'))NOTIN('\u003clocal machine\u003e','192.168.20.93')ROLLBACK;END;GOENABLETRIGGER[tr_connection_limit]ONALLSERVERGO##限制本机和指定的IP--创建IP过滤表 USEMASTERCREATETABLEdbo.ValidIP([IP][nvarchar](15)NOTNULL,[memo][nvarchar](100)NULL,CONSTRAINTPK_ValidIPPRIMARYKEYCLUSTERED(IP));GO--插入过滤IP INSERTINTOdbo.ValidIP(IP)VALUES('\u003clocal machine\u003e'); -- ============================================= -- Author: -- Create date: \u003c2021.08.04\u003e -- Description: \u003c限制本机和指定的IP登陆\u003e -- ============================================= CREATETRIGGER[tr_logon_CheckIP]ONALLSERVERFORLOGONASBEGINIFIS_SRVROLEMEMBER('sysadmin')=1BEGINDECLARE@IPNVARCHAR(15);SET@IP=(SELECTEVENTDATA().value('(/EVENT_INSTANCE/ClientHost)[1]','NVARCHAR(15)'));IFNOTEXISTS(SELECTIPFROMmaster.[dbo].[ValidIP]WHEREIP=@IP)ROLLBACK;END;END;GOENABLETRIGGER[tr_logon_CheckIP]ONALLSERVERGO ","date":"2021-11-08","objectID":"/sqlserver/:2:2","tags":["sql server"],"title":"SQL SERVER","uri":"/sqlserver/"},{"categories":["php"],"content":"php","date":"2021-11-07","objectID":"/php/","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"设置rpm源 rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 清理旧PHP yum -y remove php* 安装 ","date":"2021-11-07","objectID":"/php/:0:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"安装EPEL yum存储库 yum install epel-release -y ","date":"2021-11-07","objectID":"/php/:1:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"安装Remi存储库 rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm ","date":"2021-11-07","objectID":"/php/:2:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"安装PHP73 yum install -y php73-php-fpm php73-php-cli php73-php-bcmath php73-php-gd php73-php-json php73-php-mbstring php73-php-mcrypt php73-php-mysqlnd php73-php-opcache php73-php-pdo php73-php-pecl-crypto php73-php-pecl-mcrypt php73-php-pecl-geoip php73-php-pecl-swoole php73-php-recode php73-php-snmp php73-php-soap php73-php-xmll php73-php-simplexml 服务 ##开启开机自启 systemctl enable php73-php-fpm 配置文件 ","date":"2021-11-07","objectID":"/php/:3:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"查找php.ini位置： find /etc/opt/remi/php73 -name php.ini ","date":"2021-11-07","objectID":"/php/:4:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"The current PHP memory limit is below the recommended value of 512MB. vi /etc/opt/remi/php73/php.ini memory_limit = 512M ","date":"2021-11-07","objectID":"/php/:5:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"如果你运行的是 nginx 而不是 apache，修改 vi /etc/opt/remi/php73/php-fpm.d/www.conf user = apache group = apache ","date":"2021-11-07","objectID":"/php/:6:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"Replace the values with user = nginx group = nginx ","date":"2021-11-07","objectID":"/php/:7:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"查找 php 和扩展的安装包： rpm -qa | grep ‘php’ ","date":"2021-11-07","objectID":"/php/:8:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["php"],"content":"查看 php73-php-pecl-swoole4-4.4.15-1.el7.remi.x86_64 的安装路径： rpm -ql php73-php-pecl-swoole4-4.4.15-1.el7.remi.x86_64 #设置PHP 将php73链接到系统环境变量中，就可以使用 php -v ln -s /opt/remi/php73/root/usr/bin/php /usr/bin/php 将 cgi.fix_pathinfo 设置为 0，潜在威胁 sed -i ’s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/opt/remi/php73/php.ini 9000端口占用 netstat -ntlp | grep 9000 ps -aux | grep pool kill [***] ","date":"2021-11-07","objectID":"/php/:9:0","tags":["php","linux"],"title":"PHP","uri":"/php/"},{"categories":["http"],"content":"Apache安装","date":"2021-11-07","objectID":"/apache/","tags":["nginx","linux"],"title":"Apache","uri":"/apache/"},{"categories":["http"],"content":"设置rpm源 rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm rpm -Uvh https://mirrors.tuna.tsinghua.edu.cn/ius/ius-release-el7.rpm ","date":"2021-11-07","objectID":"/apache/:1:0","tags":["nginx","linux"],"title":"Apache","uri":"/apache/"},{"categories":["http"],"content":"安装 yum -y install httpd24u ","date":"2021-11-07","objectID":"/apache/:2:0","tags":["nginx","linux"],"title":"Apache","uri":"/apache/"},{"categories":["http"],"content":"查看 rpm -qa | grep httpd ","date":"2021-11-07","objectID":"/apache/:3:0","tags":["nginx","linux"],"title":"Apache","uri":"/apache/"},{"categories":["Linux"],"content":"Centos Samba配置","date":"2021-11-07","objectID":"/centos_samba/","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"为什么使用samba 使用linux的ftp协议传输或scp命令拷贝速度都不尽如人意 ","date":"2021-11-07","objectID":"/centos_samba/:0:0","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"步骤 ","date":"2021-11-07","objectID":"/centos_samba/:1:0","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"安装smb服务 yum install samba samba-client samba-common -y ","date":"2021-11-07","objectID":"/centos_samba/:1:1","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"复制配置文件做备份 cp -a /etc/samba/smb.conf /etc/samba/smb.conf.bak ","date":"2021-11-07","objectID":"/centos_samba/:1:2","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"关闭seliunx cat /etc/selinux/config 设置 SELINUX=disabled ","date":"2021-11-07","objectID":"/centos_samba/:1:3","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"添加系统用户（或使用root） useradd test passwd test ","date":"2021-11-07","objectID":"/centos_samba/:1:4","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"添加samba用户（必须是系统用户） smbpasswd -a 123456 ","date":"2021-11-07","objectID":"/centos_samba/:1:5","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"创建共享目录，配置权限，所有者 mkdir -p /samba/wwwroot chmod -R 0755 wwwroot/ chown -R test:test wwwroot/ ","date":"2021-11-07","objectID":"/centos_samba/:1:6","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"配置/etc/samba/smb.cof，添加内容 [wwwroot] path = /samba/wwwroot browseable = yes writable = yes valid users = root ","date":"2021-11-07","objectID":"/centos_samba/:1:7","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"开启服务 systemctl start sm ","date":"2021-11-07","objectID":"/centos_samba/:1:8","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["Linux"],"content":"访问共享目录 在windows中输入\\ip，其中wwwroot文件夹就是配置的共享目录 ","date":"2021-11-07","objectID":"/centos_samba/:1:9","tags":["linux","samba"],"title":"Centos Samba配置","uri":"/centos_samba/"},{"categories":["docker"],"content":"docker","date":"2021-11-07","objectID":"/docker/","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"1 Docker安装 ","date":"2021-11-07","objectID":"/docker/:1:0","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"安装存储库 sudo yum install -y yum-utils device-mapper-persistent-data lvm2 若sudo命令无法执行则运行 yum -y install yum-utils ","date":"2021-11-07","objectID":"/docker/:1:1","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"配置Docker源 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo ","date":"2021-11-07","objectID":"/docker/:1:2","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"查看仓库中Docker版本 yum list docker-ce --showduplicates | sort -r ","date":"2021-11-07","objectID":"/docker/:1:3","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"安装最新版本或特定版本 yum install -y docker-ce docker-ce-cli containerd.io 注意 Linux虚拟机若安装时报Error: moby-containerd conflicts with containerd.io-1.2.13-3.2.el7.x86_64 错误原因moby packages路径无法找到 curl https://packages.microsoft.com/config/rhel/7/prod.repo \u003e/etc/yum.repos.d/microsoft-prod.repo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm 修改/etc/yum.repos.d/microsoft-prod.repo中baseurl=https://packages.microsoft.com/centos/7/prod/ yum install -y docker-ce docker-ce-cli containerd.io --exclude=moby-\\* ","date":"2021-11-07","objectID":"/docker/:1:4","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"2 启动Docker 启动容器 systemctl start docker 设置开机启动systemctl enable docker 查看容器状态 systemctl status docker ","date":"2021-11-07","objectID":"/docker/:2:0","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"3 部署镜像 新建文件夹docker,将Dockerfile和jar包复制到文件夹中 在文件夹目录下运行docker build -t \u003cimage id\u003e . 运行docker images查看镜像 启动镜像,运行 docker run -d -p 8088:8088 --name \u003ccontainer name\u003e \u003cimage id\u003e 示例： docker build -t registry.gitlab.ssc.stn.sh.cn . docker run -d -p 1088:8088 –name repair_api a36b6 ","date":"2021-11-07","objectID":"/docker/:3:0","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"4 删除镜像 查询容器 docker ps -a 删除容器 docker rm \u003ccontainer id\u003e 删除镜像 docker rmi \u003cimage id\u003e ","date":"2021-11-07","objectID":"/docker/:4:0","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"安装JDK 运行 yum -y install java-1.8.0-openjdk* 配置环境变量 ","date":"2021-11-07","objectID":"/docker/:5:0","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"Docker Redis 查看可用的 Redis 版本 docker search redis 取最新版的 Redis 镜像 docker pull redis:latest 运行容器 docker run -itd --name redis-test -p 6379:6379 redis --appendonly yes 将redis数据dump.rdb存放至/docker/目录下,并运行 docker run -itd --name redis -v /docker/dump.rdb:/data/dump.rdb -p 6379:6379 redis-bak --appendonly yes 测试 docker exec -it redis-test /bin/bash redis-cli set test 1 get test exit 容器迁移 1). 导出镜像 docker export \u003ccontainer_id\u003e \u003e \u003cfile_name\u003e.tar 2). 停止容器 docker stop \u003ccontainer_id\u003e 3). 导入镜像 docker import \u003cfile_name\u003e.tar \u003ccontainer_id\u003e ","date":"2021-11-07","objectID":"/docker/:6:0","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["docker"],"content":"清理docker日志 查找容器log日志文件 find /var/lib/docker/containers/ -name *-json.log |xargs du -sh 执行清理 cat /dev/null \u003e /var/lib/docker/containers/dfe25896671f0def031c5ffeb12dd335f7f54212c6ca5d3aca1c3f50b5e1eec4/dfe25896671f0def031c5ffeb12dd335f7f54212c6ca5d3aca1c3f50b5e1eec4-json.log 设置容器日志大小，通过配置容器docker-compose的max-size选项来实现 nginx: image: nginx:1.12.1 restart: always logging: driver: “json-file” options: max-size: “5g” 全局设置 新建/etc/docker/daemon.json，添加log-dirver和log-opts参数 { \"registry-mirrors\": [\"http://f613ce8f.m.daocloud.io\"], \"log-driver\":\"json-file\", \"log-opts\": {\"max-size\":\"500m\", \"max-file\":\"3\"} } max-size=500m 意味着一个容器日志大小上限是500M max-file=3 意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json 重启docker systemctl daemon-reload systemctl restart docker ","date":"2021-11-07","objectID":"/docker/:7:0","tags":["docker","linux","redis"],"title":"Docker","uri":"/docker/"},{"categories":["http"],"content":"Nginx安装","date":"2021-11-07","objectID":"/nginx/","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"安装扩展插件 apt-get update apt-get install vim ","date":"2021-11-07","objectID":"/nginx/:1:0","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"1 安装nginx(容器方式) ","date":"2021-11-07","objectID":"/nginx/:2:0","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"拉取镜像 docker pull nginx:1.21.1 ","date":"2021-11-07","objectID":"/nginx/:2:1","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"查看本地镜像 docker image ","date":"2021-11-07","objectID":"/nginx/:2:2","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"首次创建ngixn容器 docker run -d --name nginx-web nginx ","date":"2021-11-07","objectID":"/nginx/:2:3","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"创建nginx目录 mkdir -p /var/log/nginx mkdir -p /etc/nginx mkdir -p /usr/share/nginx/html ","date":"2021-11-07","objectID":"/nginx/:2:4","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"复制容器中的配置文件至目录 docker cp [容器id]:/etc/nginx ./conf docker cp [容器id]:/usr/share/nginx/html ./html ","date":"2021-11-07","objectID":"/nginx/:2:5","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"停止并删除容器 docker stop nginx-web docker rm nginx-web ","date":"2021-11-07","objectID":"/nginx/:2:6","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"创建正式容器 docker run -d \\ --name nginx-web \\ -p 80:80 \\ -p 443:443 \\ -v /usr/share/nginx/html:/usr/share/nginx/html \\ -v /etc/nginx/conf/conf.d:/etc/nginx/conf/conf.d:ro \\ -v /etc/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \\ -v /var/log/nginx:/var/log/nginx \\ nginx ","date":"2021-11-07","objectID":"/nginx/:2:7","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"查看容器IP docker inspect [dockername] ","date":"2021-11-07","objectID":"/nginx/:2:8","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"2 安装nginx(文件方式) ","date":"2021-11-07","objectID":"/nginx/:3:0","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"下载 nginx-1.9.9.tar.gz，移动到/usr/local/下 ","date":"2021-11-07","objectID":"/nginx/:3:1","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"解压 tar -zxvf nginx-1.9.9.tar.gz ","date":"2021-11-07","objectID":"/nginx/:3:2","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"进入nginx目录 cd nginx-1.9.9 ","date":"2021-11-07","objectID":"/nginx/:3:3","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"配置 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module ","date":"2021-11-07","objectID":"/nginx/:3:4","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"编译安装(默认安装在/usr/local/nginx) make make install ","date":"2021-11-07","objectID":"/nginx/:3:5","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"3 安装nginx(源方式) ","date":"2021-11-07","objectID":"/nginx/:4:0","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"安装EPEL yum存储库 yum install epel-release -y ","date":"2021-11-07","objectID":"/nginx/:4:1","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"安装 yum install nginx ","date":"2021-11-07","objectID":"/nginx/:4:2","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["http"],"content":"启动nginx服务 systemctl enable nginx ","date":"2021-11-07","objectID":"/nginx/:4:3","tags":["nginx","php","linux","docker"],"title":"Nginx","uri":"/nginx/"},{"categories":["database"],"content":"oracle","date":"2021-11-07","objectID":"/oracle/","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"异常 ","date":"2021-11-07","objectID":"/oracle/:1:0","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查询死锁 selectl.session_idsid,s.serial#,l.locked_mode,l.oracle_username,s.user#,l.os_user_name,s.machine,s.terminal,a.sql_text,a.actionfromv$sqlareaa,v$sessions,v$locked_objectlwherel.session_id=s.sidands.prev_sql_addr=a.addressorderbysid,s.serial#;selecta.sid,spid,status,substr(a.program,1,40)prog,a.terminal,osuser,value/60/100valuefromv$sessiona,v$processb,v$sesstatcwherec.statistic#=12andc.sid=a.sidanda.paddr=b.addrorderbyvaluedesc;SELECTSID,SERIAL#,INST_ID,MODULE,STATUS,S.LAST_CALL_ETFROMgv$sessionSWHERES.USERNAMEISNOTNULLANDUPPER(S.PROGRAM)IN('TOAD.EXE','W3WP.EXE')--AND S.LAST_CALL_ET \u003e= 2 * 60*60 ANDS.STATUS='INACTIVE'ORDERBYS.LAST_CALL_ETDESC ","date":"2021-11-07","objectID":"/oracle/:1:1","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查询连接数和session selectcount(*)fromv$process;selectcount(*)fromv$session;select*fromv$resource_limit; ","date":"2021-11-07","objectID":"/oracle/:1:2","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查询表空间 SELECTsegment_name,segment_type,blocksFROMdba_segmentsWHEREsegment_name='TDB073';SELECTblocks,empty_blocks,num_rowsFROMuser_tablesWHEREtable_name='TDB073'; ","date":"2021-11-07","objectID":"/oracle/:1:3","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"分析表 begindbms_stats.gather_table_stats(ownname=\u003e'TEST',tabname=\u003e'STUDENT',estimate_percent=\u003edbms_stats.AUTO_SAMPLE_SIZE,degree=\u003e4,cascade=\u003eTRUE);end; ","date":"2021-11-07","objectID":"/oracle/:1:4","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"分析索引 begindbms_stats.gather_index_stats(ownname=\u003e'TEST',indname=\u003e'IDX_STUDENT_BIRTH',estimate_percent=\u003edbms_stats.AUTO_SAMPLE_SIZE,degree=\u003e4);end; ","date":"2021-11-07","objectID":"/oracle/:1:5","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"定期清理空闲会话 CREATE OR REPLACE PROCEDURE DB_KILL_IDLE_CLIENTS AUTHID DEFINER AS job_no number; num_of_kills number := 0; BEGIN FOR REC IN ( SELECT SID, SERIAL#,MODULE, STATUS FROM V$SESSION S WHERE S.USERNAME IS NOT NULL AND UPPER(S.PROGRAM) IN ('TOAD.EXE', 'W3WP.EXE') AND S.LAST_CALL_ET \u003e= 60*60 AND S.STATUS = 'INACTIVE' ORDER BY SID DESC ) LOOP --------------------------------------------------------------------------- -- kill inactive sessions immediately --------------------------------------------------------------------------- DBMS_OUTPUT.PUT('LOCAL SID ' || rec.sid || '(' || rec.module || ')'); execute immediate 'alter system disconnect session ''' || rec.sid || ', ' || rec.serial# || '''immediate' ; DBMS_OUTPUT.PUT_LINE('. killed locally ' || job_no); num_of_kills := num_of_kills + 1; END LOOP; DBMS_OUTPUT.PUT_LINE ('Number of killed system sessions: ' || num_of_kills); END DB_KILL_IDLE_CLIENTS; ------ alter system disconnect session '316,2379' immediate ","date":"2021-11-07","objectID":"/oracle/:1:6","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"表空间和用户 ","date":"2021-11-07","objectID":"/oracle/:2:0","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"创建表空间和用户 createtablespaceBLDSloggingdatafile'C:\\app\\Administrator\\oradata\\BLDS\\BLDS.dbf'size1024mautoextendonnext1024mmaxsize2048mextentmanagementlocal;droptablespace表空间名称includingcontentsanddatafilescascadeconstraint; ","date":"2021-11-07","objectID":"/oracle/:2:1","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"用户创建,修改,删除,权限 create user 用户名 identified by 口令[即密码] default tablespace 表空间; alter user 用户名 identified by 口令[改变的口令]; drop user 用户名 cascade; --加了cascade就可以把用户连带的数据全部删掉 GRANT CONNECT,RESOURCE TO 用户名; (GRANT DBA TO ..) REVOKE CONNECT,RESOURCE FROM 用户名; ","date":"2021-11-07","objectID":"/oracle/:2:2","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"导出数据库 exp BLDS/BLDS@127.0.0.1:1521/orcl file='C:/Database/blds20190916.dmp' ","date":"2021-11-07","objectID":"/oracle/:2:3","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"导入数据库 cmd中 imp BLDS/BLDS@BLDS file='d:/back/BLDS2018-10-24.dmp' full=y ignore=y ","date":"2021-11-07","objectID":"/oracle/:2:4","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查看用户权限 select * from DBA_SYS_PRIVS where grantee='BLDS' ","date":"2021-11-07","objectID":"/oracle/:2:5","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"SQLPLUS sqlplus / as sysdba ","date":"2021-11-07","objectID":"/oracle/:2:6","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"表 ","date":"2021-11-07","objectID":"/oracle/:3:0","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"创建表 Create table createtableTDB001_EX_TMP(table_idNUMBER(18)notnull,customeridVARCHAR2(30)notnull,warehouseidVARCHAR2(30)notnull,happen_dayDATEnotnull,skuVARCHAR2(20)notnull,sku_typeVARCHAR2(30),qtyNUMBER(18,8),transfer_statusCHAR(2),main_distCHAR(1),made_timeDATE,makerVARCHAR2(10),update_timeDATE,updaterVARCHAR2(10),qty_undoNUMBER(18,8),qty_availableNUMBER(18,8),qty_transmitNUMBER(18,8),mq_statusCHAR(1),primarykey(table_id)) Create sequence createsequenceTDB001_EX_TMP_SEQUENCEminvalue1maxvalue9999999999999999999999999999/*NOMAXVALUE*/startwith1incrementby1nocache;--表字段默认值 sku varchar2(20) default '123456' not null, ","date":"2021-11-07","objectID":"/oracle/:3:1","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查询sequence select * from user_sequences ","date":"2021-11-07","objectID":"/oracle/:3:2","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"创建索引 create index I_TDB073_O on TDB073(trim(orderno)) online; create index I_TDB076_ODS on TDB076 (trim(ORDERNO), trim(DELIVERYNO), STATUS_CODE) online; ","date":"2021-11-07","objectID":"/oracle/:3:3","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"DBLINK ","date":"2021-11-07","objectID":"/oracle/:4:0","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"创建及删除dblink grant create database link to user; --只有user用户能使用的dblink grant create public database link to user;--所有用户都可以使用的dblink grant drop public database link to user; --删除dblink的权限 drop public database link linkname; create public database link orcl_remote connect to BLDS identified by BLDS USING 'orcl_101.132.35.49'; --创建dblink ","date":"2021-11-07","objectID":"/oracle/:4:1","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查询dblink select owner,object_name from dba_objects where object_type='DATABASE LINK'; ","date":"2021-11-07","objectID":"/oracle/:4:2","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"JOB ","date":"2021-11-07","objectID":"/oracle/:5:0","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"创建job declarejobnumber;beginsys.dbms_job.submit(job,'SP_S101_1003;',sysdate,'sysdate+5/(24*60)');end;declarejobnumber;beginsys.dbms_job.submit(job,'declare s1 varchar(1000); begin SP_HAR101(s1); end;',sysdate,'sysdate+3/(24*60)');end; ","date":"2021-11-07","objectID":"/oracle/:5:1","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查询job SELECT * FROM DBA_JOBS; select * from all_jobs; select job, log_user, to_char(last_date,‘yyyy-mm-dd hh24:mi:ss’) last_date, to_char(next_date,‘yyyy-mm-dd hh24:mi:ss’) next_date, interval, what from user_jobs ","date":"2021-11-07","objectID":"/oracle/:5:2","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"修改job间隔 begindbms_job.interval(103,'sysdate+15/(24*60)');commit;end; ","date":"2021-11-07","objectID":"/oracle/:5:3","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"运行,停止,删除job begin--dbms_job.run(44); --启动JOB dbms_job.broken(44,true,sysdate);--停止JOB end;begindbms_job.remove(23);end; ","date":"2021-11-07","objectID":"/oracle/:5:4","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"执行 ","date":"2021-11-07","objectID":"/oracle/:6:0","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"运行存储过程带参数 declarev_resultvarchar(100);beginSP_HAR101(v_result);end; ","date":"2021-11-07","objectID":"/oracle/:6:1","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"查,删重复数据 查找表中多余的重复记录（多个字段） select * from 表 a where (a.Id,a.seq) in (select Id,seq from 表 group by Id,seq having count(*) \u003e 1) 删除表中多余的重复记录（多个字段），只留有rowid最小的记录 delete from 表 a where (a.Id,a.seq) in (select Id,seq from 表 group by Id,seq having count(*) \u003e 1) and rowid not in (select min(rowid) from 表 group by Id,seq having count(*)\u003e1) ","date":"2021-11-07","objectID":"/oracle/:6:2","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"Docker ","date":"2021-11-07","objectID":"/oracle/:7:0","tags":["oracle"],"title":"Oracle","uri":"/oracle/"},{"categories":["database"],"content":"docker中数据备份 docker exec -it \u003ccontainer_id\u003e /bin/bash exp account/password@tnsName file=/u01/app/oracle/file.dmp log=/u01/app/oracle/file.log exp 服务器A上数据库账号/密码@本地服务器B配置的tnsnames.ora内的name file=导出路径（此处为Oracle容器内相对路径） log=日志路径（相对路径+1） full=数据库完全导出 ","date":"2021-11-07","objectID":"/oracle/:7:1","tags":["oracle"],"title":"Oracle","uri":"/oracle/"}]